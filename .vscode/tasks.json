{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "options":{
		"env": {
			"ename": "${workspaceFolderBasename}"
		}
	  },
	"presentation": {
		"clear": true,
		"echo": false,
		"reveal": "always",
		"focus": true,
		"panel": "shared",
		"showReuseMessage": false
	},
	"problemMatcher": {
		"owner": "cpp",
		"base": "$gcc",
		"fileLocation": [
			  "absolute"
		  ]
	},
    "tasks": [

		{
			"label": "lib make all",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make all",
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
				  	"absolute"
  				]
			},
			"group": "build"
		},

		{
			"label": "lib make test and run it",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make -j8  && test/gdmusickit_test",

			"group": {
				"kind": "build",
				"isDefault": true
			},
			// "problemMatcher": {
			// 	"owner": "cpp",
			// 	 "fileLocation": [
			// 	 	"relative",
			// 	 	//"${workspaceRoot}/lib/src"
			// 	 ],
			// 	"pattern": {
			// 		"regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
			// 		"file": 1,
			// 		"line": 2,
			// 		"column": 3,
			// 		"severity": 4,
			// 		"message": 5
			// 	}
			// },
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
				  	"absolute"
  				]
			}
		},
		{
			"label": "lib make clean",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make clean",
			"problemMatcher": []
		},
		{
			"label": "lib make doc",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make doc",
			"problemMatcher": []
		},
		{
			"label": "lib clean build",
			"type": "process",
			"command": "rm -rf ${workspaceFolder}/lib/build/*",
			"problemMatcher": []
		},
		{
			"label": "lib cmake and make (debug)",
			"type": "shell",
			"command": "rm -rf ${workspaceFolder}/lib/build/* && cd ${workspaceFolder}/lib/build && cmake -G 'Unix Makefiles' -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -D USE_UNIT_TESTING=ON -D GENERATE_DOC=ON -DCMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_COMPILER=/Library/Developer/CommandLineTools/usr/bin/clang++ .. && make VERBOSE=1 -j8 all",
			"problemMatcher": []
		},
		{
			"label": "lib cmake and make (release)",
			"type": "shell",
			"command": "rm -rf ${workspaceFolder}/lib/build/* && cd ${workspaceFolder}/lib/build && cmake -D USE_UNIT_TESTING=ON -D GENERATE_DOC=ON -DCMAKE_BUILD_TYPE=Release -D CMAKE_CXX_COMPILER=/Library/Developer/CommandLineTools/usr/bin/clang++ .. && make all",
			"problemMatcher": []

		},
		{
			"label": "lib cmake just docs",
			"type": "shell",
			"command": "rm -rf ${workspaceFolder}/lib/build/* && cd ${workspaceFolder}/lib/build && cmake -D USE_UNIT_TESTING=OFF -D GENERATE_DOC=ON .. && make doc",
			"problemMatcher": []
		},
		{
			"label": "lib just docs",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && cmake -D USE_UNIT_TESTING=OFF -D GENERATE_DOC=ON .. && make doc",
			"problemMatcher": []
		},
		{
			"label": "lib cppcheck",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make cppcheck",
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
					  "absolute"
				  ]
			},
		},
		{
			"label": "cppcheck current file",
			"type": "shell",
			"command": "echo ${file} && cppcheck --verbose --suppress=missingIncludeSystem --std=c++17 --enable=all -I./include ${file}",
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
					  "absolute"
				  ]
			},
		},
		{
			"label": "lib clang-tidy fix current file",
			"type": "shell",
            "command": "cd ${workspaceFolder}/lib/build && clang-tidy -extra-arg=-std=c++17 -header-filter='.*'  -p ${workspaceFolder}/lib/build -fix ${file} ",
			"options": {
				"cwd": "${workspaceFolder}/lib/build",
			},
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
					  "absolute"
				  ]
			},
		},
		{
			"label": "lib clang-tidy",
			"type": "shell",
			"command": "cd ${workspaceFolder}/lib/build && make clang-tidy",
			"options": {
				"cwd": "${workspaceFolder}/lib/",
			},
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
					  "absolute"
				  ]
			},
		},

		{
			"label": "app cmake and make",
			"type": "shell",
			"command": "rm -rf ${workspaceFolder}/app/build/* && cd ${workspaceFolder}/app/build && cmake -D USE_UNIT_TESTING=ON -D GENERATE_DOC=ON .. && make all",
			"problemMatcher": []
		},
		{
			"label": "app make all",
			"type": "shell",
			"command": "cd ${workspaceFolder}/app/build && make all",
			"problemMatcher": [],
			"group": "build"
		},

		{
			"label": "app run",
			"dependsOn" : "app make all",
			"type": "process",
			"command": "${workspaceFolder}/app/build/loggingTestApp",
			"options": {
				"cwd": "${workspaceFolder}/app/build",
			},
			"problemMatcher": []
		},
		{
			"label": "app clean build",
			"type": "process",
			"command": "rm -rf ${workspaceFolder}/app/build/*",
			"problemMatcher": []
		},


		{
			"label": "app run",
			"dependsOn" : "app make all",
			"type": "process",
			"command": "${workspaceFolder}/app/build/loggingTestApp",
			"options": {
				"cwd": "${workspaceFolder}/app/build",
			},
			"problemMatcher": []
		},

		{
			"label": "create Xcode project",
			"type": "process",
			"command": "cmake",
			"args": [
				"-G Xcode",
				"-H../include/gdmusickit",
				"-B../ide",
				".."
            ],
			"options": {
				"cwd": "${workspaceFolder}/lib/build",
			},
			"problemMatcher": []
		},




		{
            "label": "Test NoteSequenceTest.ShouldAddNote",
			"type": "process",
			"command": "${workspaceFolder}/lib/build/test/gdmusickit_test",
            "args": [
				"--gtest_filter=NoteSequenceTest.ShouldAddNote"
            ],
            "group": "test",
            "options": {
				"cwd": "${workspaceFolder}/lib/build",
				"env": {
					"WHATEVER" : "thing=1"
				}
            },
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": []
		},
		{
            "label": "Test NoteSequenceTest.*",
			"type": "process",
			"command": "${workspaceFolder}/lib/build/test/gdmusickit_test",
            "args": [
				"--gtest_filter=NoteSequenceTest.*"
            ],
            "group": "test",
            "options": {
				"cwd": "${workspaceFolder}/lib/build",
				"env": {
					"WHATEVER" : "thing=1"
				}
            },
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "problemMatcher": []
		},
		{
            "label": "Test MIDITrackTest.*",
			"type": "process",
			"command": "${workspaceFolder}/lib/build/test/gdmusickit_test",
            "args": [
				"--gtest_filter=MIDITrackTest.*"
            ],
            "group": "test",
            "options": {
				"cwd": "${workspaceFolder}/lib/build",
				"env": {
					"WHATEVER" : "thing=1"
				}
            },
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
			},
			"dependsOn":["lib make all"],
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
				  	"absolute"
  				]
			}
		},
		{
            "label": "Test NoteTestFuns.*",
			"type": "process",
			"command": "${workspaceFolder}/lib/build/test/gdmusickit_test",
            "args": [
				"--gtest_filter=NoteTestFuns.*"
            ],
            "group": "test",
            "options": {
				"cwd": "${workspaceFolder}/lib/build",
				"env": {
					"WHATEVER" : "thing=1"
				}
            },
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
			},
			"dependsOn":["lib make all"],
			"problemMatcher": {
				"owner": "cpp",
				"base": "$gcc",
				"fileLocation": [
				  	"absolute"
  				]
			}
		},



		{
			"type": "shell",
			"label": "clang++ C++17 build active file",
			"command": "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++",
			"args": [
				"-std=c++17",
				"-stdlib=libc++",
				"-g",
				"${file}",
				"-o",
				"${workspaceFolder}/lib/build/${fileBasenameNoExtension}"
			],
			"options": {
				"cwd": "${workspaceFolder}/lib/build/bin"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": "build"
		},
		{
			"type": "shell",
			"label": "build and run active file",
			"command": "${workspaceFolder}/build/${fileBasenameNoExtension}",
			"dependsOn": "clang++ C++17 build active file",
			"problemMatcher": [
				"$gcc"
			],
			"group": "build"
		},
	]
}
